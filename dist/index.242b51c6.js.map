{"mappings":"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","sources":["index.ts"],"sourcesContent":["// Get references to HTML elements\nconst board = document.querySelector('.game-container') as HTMLElement;\nconst button = document.querySelector('.button') as HTMLElement;\nconst winMessage = document.querySelector('.winner') as HTMLElement;\n\n// Track the number of filled boxes\nlet filledBoxesCount: number = 0; \n\n// Define a type for the current turn\ntype Turn = \"X\" | \"O\" | \"\";\n\n// Initialize the first turn\nlet turn: Turn = \"X\";\n\n// Function to listen for clicks on the game board\nfunction listenBoard(): void {\n    board.addEventListener('click', runGame);\n}\n\n// Main function to set up the game\nfunction main(): void {\n    createBoard();\n    listenBoard();\n}\n\n// Function to handle a move when a box is clicked\nfunction runGame(e: Event): void {\n    const boxId: string | null = (<HTMLElement>e.target).id;\n\n    // Check if boxId is null (e.g., clicked outside of a box)\n    if (boxId === null) return;\n\n    const box: HTMLElement | null = document.querySelector(`#${boxId}`);\n\n    // Check if box is null or already filled\n    if (box === null || box.textContent !== \"\") return;\n\n    // Fill the box with the current player's symbol\n    box.textContent = turn;\n\n    // Change the box background to indicate the player's symbol\n    changeBoxBackground(box);\n\n    filledBoxesCount++; // Increment filled box count\n\n    // Check if there is a winner\n    const winner: boolean = checkWinner();\n\n    if (!winner) {\n        // If no winner and all boxes are filled, it's a tie\n        if (filledBoxesCount === 9) {\n            endGame(\"No winners :(\"); // Display tie game message\n        } else {\n            // If no winner and not a tie, switch to the next player's turn\n            switchPlayer();\n        }\n    } else {\n        // If there is a winner, end the game\n        endGame(`Winner is ${turn}!!!`);\n    }\n}\n\n// Function to change the box background based on the current player's turn\nfunction changeBoxBackground(box: HTMLElement): void {\n    if (turn === \"X\") {\n        box.classList.replace(\"box\", \"x\");\n    } else {\n        box.classList.replace(\"box\", \"o\");\n    }\n}\n\n// Function to end the game with an optional message\nfunction endGame(message: string = \"\"): void {\n    board.removeEventListener('click', runGame);\n    button.addEventListener('click', resetGame);\n\n    // Display the message\n    if (winMessage === null) return;\n    winMessage.textContent = message;\n    winMessage.style.display = 'block';\n\n    button.style.visibility = 'visible';\n}\n\n// Function to reset the game\nfunction resetGame(): void {\n    // Reset the turn to \"X\"\n    turn = \"X\";\n\n    // Clear the boxes and reset the board\n    resetBoxes();\n\n    // Hide the button and winner message\n    button.style.visibility = \"hidden\";\n    winMessage.textContent = \"\";\n\n    // Add click event listener back to the board\n    board.addEventListener('click', runGame);\n}\n\n// Function to reset all the boxes on the board\nfunction resetBoxes(): void {\n    for (let i = 0; i <= 8; i++) {\n        const box = document.querySelector(`#box-${i}`) as HTMLElement;\n        box.textContent = \"\";\n        const boxClass: string = box.className;\n        box.classList.remove(boxClass);\n        void box.offsetWidth;\n        box.classList.add(\"box\");\n    }\n}\n\n// Function to check if there is a winner\nfunction checkWinner(): boolean {\n    const boxes: Array<string> = getBoxes();\n    const winningCombinations: number[][] = [\n        [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows\n        [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns\n        [0, 4, 8], [2, 4, 6]             // Diagonals\n    ];\n\n    for (const combination of winningCombinations) {\n        const [a, b, c] = combination;\n        if (boxes[a] !== \"\" && boxes[a] === boxes[b] && boxes[b] === boxes[c]) {\n            return true; // Found a winning combination\n        }\n    }\n\n    return false; // No winning combinations found\n}\n\n// Function to get the content of all the boxes on the board\nfunction getBoxes(): Array<string> {\n    const boxesContent: Array<string> = [];\n    for (let i = 0; i < 8; i++) {\n        const box = document.querySelector(`#box-${i}`) as HTMLElement;\n        const boxContent: string | null = box.textContent;\n        if (boxContent === null) boxesContent.push(\"\");\n        else {\n            boxesContent.push(boxContent);\n        }\n    }\n    return boxesContent;\n}\n\n// Function to switch the current player's turn\nfunction switchPlayer(): void {\n    if (turn == \"X\") {\n        turn = \"O\"\n    } else {\n        turn = \"X\"\n    }\n}\n\n// Function to create the game board with boxes\nfunction createBoard(): void {\n    for (let i = 0; i < 9; i++) makeBox(i)\n}\n\n// Function to create a single box element\nfunction makeBox(i: number): void {\n    const box: HTMLDivElement = document.createElement('div');\n    box.className = 'box';\n    box.id = `box-${i}`;\n    box.textContent = '';\n    board.append(box);\n}\n\n// Start the game by calling the main function\nmain();\n"],"names":[],"version":3,"file":"index.242b51c6.js.map","sourceRoot":"/__parcel_source_root/"}